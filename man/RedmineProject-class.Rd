% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{class}
\name{RedmineProject-class}
\alias{RedmineProject}
\alias{RedmineProject-class}
\title{Redmine Project object}
\description{
Reference Class used to interact with a Redmine Project
}
\section{Fields}{

\describe{
\item{\code{apiKey}}{The API key for your user, retrieved from your account page. Protect this key, or consider a special system account with limited permissions.}

\item{\code{url}}{The URL of your Redmine instance, including http:// or https://. At this stage, the package does not support Redmine addresses such as http://<domain>/redmine. Different ports are supported though.}

\item{\code{projectId}}{The project identifier}

\item{\code{projectDetails}}{List containing all information about the project}

\item{\code{lastUpload}}{List containing the last upload details so it can be attached to an issue}

\item{\code{availableTrackers}}{The trackers that are available in the project}

\item{\code{issueCategories}}{The issue categories that are available in the project}

\item{\code{assignedUsers}}{}
}}
\section{Methods}{

\describe{
\item{\code{createNewIssue(subject, description = "", trackerId = NULL,
  categoryId = NULL, attachLastUpload = F, statusId = NULL,
  assignedToId = NULL, parentIssueId = NULL, customFields = list(),
  watcherUserIds = NULL, verbose = F)}}{Create a new issue
trackerId: REQUIRED - Numeric ,
subject, 
description, 
categoryId = NULL, 
statusId = NULL,
categoryId = NULL
assigned_to_id = NULL,
parent_issue_id = NULL,
custom_fields = list(),
watcher_user_ids = NULL}

\item{\code{fetchMembers()}}{Fetches member list for the project and update the object}

\item{\code{getIssueList(params = list())}}{Retrieve the issue list for the project.
params: Optional named list of filter terms from Redmine. Following are permitted by the API:
 - subproject_id - limit issues to subproject
 - tracker_id - Only retrieve issues for given tracker id
 - status_id - Only retrieve issues for the given status id
 - assigned_to_id - User id currently assigned
 - cf_<x> Custom field, where x is the field id, and valid value for the field}

\item{\code{initialize(apiKey, url, projectId)}}{Initialise the class 

      apiKey: Required character string. The API key obtained from your Redmine user profile. RESTful API must be enable by the Redmine administrator 

      url: Required character string. The URL for your Redmine installation. Note that this is stripped to a base url. 

      projectId: Required character string. The Redmine project identifier.}

\item{\code{updateIssue(issueId, notes, trackerId = NULL, description = NULL,
  statusId = NULL, subject = NULL, attachLastUpload = F)}}{Updates an issue on the Redmine project.
issueId: Required Numeric - The issue number to update
notes: Required Character - The notes to add to the issue
description: Optional character - Update the issue description
trackerId: Optional - Change the tracker that this issue uses (numeric)
statusId: Optional Numeric - Update to this status ID. Must be a valid status id and the workflow must permit the transition
subject: Optional character - Change the description to this character string.
attachLastUpload: Optional logical - Attach last upload. Default is false.}

\item{\code{uploadFile(filePath, description = NULL)}}{Upload file to Redmine, ready for attaching to an issue.
filePath: Required valid path to file
description: Optional character string describing the file}
}}

